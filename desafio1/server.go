package main

import (
	"context"
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"time"

	_ "github.com/mattn/go-sqlite3"
)
type AutoGenerated struct {
    USDBRL struct {
		Code       string `json:"code"`
		Codein     string `json:"codein"`
		Name       string `json:"name"`
		High       string `json:"high"`
		Low        string `json:"low"`
		VarBid     string `json:"varBid"`
		PctChange  string `json:"pctChange"`
		Bid        string `json:"bid"`
		Ask        string `json:"ask"`
		Timestamp  string `json:"timestamp"`
		CreateDate string `json:"create_date"`
	} `json:"USDBRL"`
}


func main() {
	// Create database just once:
	err := createDataBase()
	if err != nil {
		log.Output(1, err.Error())
		return
	}

	// Create http handle func and listener
	http.HandleFunc("/cotacao", dollarQuotationHandler)
	http.ListenAndServe(":8080", nil)
}

func dollarQuotationHandler(w http.ResponseWriter, r *http.Request) {
	ctx := context.Background()
	ctx, cancel := context.WithTimeout(ctx, time.Millisecond*200)
	defer cancel()
	resp, err := dollarQuotation(ctx)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	w.Write([]byte(resp))
	//w.Write([]byte(`Hello world`))

	// insert new quotation in the database
	ctx2 := context.Background()
	ctx2, cancel = context.WithTimeout(ctx2, time.Millisecond*10)
	err = insertDataBase(ctx2, resp)
	if err != nil {
		return
	}
}

func createDataBase() (error) {
	file, err := os.Create("./database.db")
	if err != nil {
		return err
	}
	file.Close()

	sqliteDatabase, err := sql.Open("sqlite3", "./database.db")
	defer sqliteDatabase.Close()
	if err != nil {
		return err
	}
	err = createTable(sqliteDatabase)
	if err != nil {
		return err
	}
	return nil
}

func createTable(db *sql.DB) error {
	createTableSQL := `create table quotations ("code" TEXT, "codein" TEXT, "name" TEXT, "high" TEXT, "low" TEXT, "varBid" TEXT, "pctChange" TEXT, "ask" TEXT, "timestamp" TEXT, "create_date" TEXT);`
	statement, err := db.Prepare(createTableSQL)
	if err != nil {
		log.Output(1, err.Error())
		return err
	}
	statement.Exec()
	return nil
}

func insertDataBase(ctx context.Context, resp string) error {
    var quotation AutoGenerated
	json.Unmarshal([]byte(resp), &quotation)

	sqliteDatabase, err := sql.Open("sqlite3", "./database.db")
	defer sqliteDatabase.Close()
	if err != nil {
		log.Output(1, err.Error())
		return err
	}
	insertCode := `insert into quotations(code, codein, name, high, low, varBid, pctChange, ask, timestamp, create_date) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`
	statement, err := sqliteDatabase.Prepare(insertCode)
	if err != nil {
		log.Output(1, err.Error())
		return err
	}
	_, err = statement.Exec(quotation.USDBRL.Code, quotation.USDBRL.Codein, quotation.USDBRL.Name, quotation.USDBRL.High, quotation.USDBRL.Low, quotation.USDBRL.VarBid, quotation.USDBRL.PctChange, quotation.USDBRL.Ask, quotation.USDBRL.Timestamp, quotation.USDBRL.CreateDate)
	if err != nil {
		log.Output(1, err.Error())
		return err
	}
	//queryDataBase(sqliteDatabase)

	select {
	case <-ctx.Done():
		err := errors.New("Database insert call timed out")
		log.Output(1, err.Error())
		return err
	default:
		log.Output(1, "Quotation was successfully persisted in database")
		return nil
	}
}

// func queryDataBase(db *sql.DB){
// 	row, err := db.Query("select * from quotations")
// 	var quotation AutoGenerated
// 	if err != nil {
// 		return
// 	}
// 	fmt.Println("**********************************")
// 	fmt.Println("****** Persisted quotations: *****")
// 	fmt.Println("**********************************")
// 	count := 1
// 	for row.Next(){
// 		err = row.Scan(&quotation.USDBRL.Code, &quotation.USDBRL.Codein, &quotation.USDBRL.Name, &quotation.USDBRL.High, &quotation.USDBRL.Low, &quotation.USDBRL.VarBid, &quotation.USDBRL.PctChange, &quotation.USDBRL.Ask, &quotation.USDBRL.Timestamp, &quotation.USDBRL.CreateDate)
// 		if err != nil {
// 			return
// 		}
// 		code := quotation.USDBRL.Code
// 		codein := quotation.USDBRL.Codein
// 		name := quotation.USDBRL.Name
// 	    high := quotation.USDBRL.High
// 		low := quotation.USDBRL.Low
// 		varBid := quotation.USDBRL.VarBid
// 		pctChange := quotation.USDBRL.PctChange
// 		ask := quotation.USDBRL.Ask
// 		timestamp := quotation.USDBRL.Timestamp
// 		createDate := quotation.USDBRL.CreateDate
// 		fmt.Printf("****** Quotation %v: code: %v, codein: %v, name: %v, high: %v, low: %v, varBid: %v, pctChange: %v, ask: %v, timestamp:%v, createDate: %v\n", count, code, codein, name, high, low, varBid, pctChange, ask, timestamp, createDate)
// 		count = count + 1
// 	}
// 	return
// }

func dollarQuotation(ctx context.Context) (string, error) {
	url := "https://economia.awesomeapi.com.br/json/last/USD-BRL"
	res, err := http.Get(url)
	if err != nil {
		log.Output(1, fmt.Sprintf("Error connecting to %s: %s\n", url, err))
		return "", err
	}
	body, err := io.ReadAll(res.Body)
	if err != nil {
		log.Output(1, err.Error())
		return "", err
	}
	res.Body.Close()
	select {
	case <-ctx.Done():
		err := errors.New("Remote Service API call timed out")
		log.Output(1, err.Error())
		return "", err
	default:
		log.Output(1, string(body))
		return string(body), nil
	}
}
